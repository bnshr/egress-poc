apiVersion: v1
kind: Namespace
metadata:
  name: ocp-e2e

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: default-sa-cluster-admin
subjects:
  - kind: ServiceAccount
    name: default
    namespace: ocp-e2e
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
data:
  config: 
kind: Secret
metadata:
  name: kubeconfig-secret
  namespace: ocp-e2e
type: Opaque

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: junit-reports-pvc
  namespace: ocp-e2e
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: batch/v1
kind: Job
metadata:
  name: openshift-e2e
  namespace: ocp-e2e
spec:
  backoffLimit: 0
  ttlSecondsAfterFinished: 86400
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: tests
        image: registry.ci.openshift.org/ocp/4.20:tests
        imagePullPolicy: Always
        env:
        - name: OPENSHIFT_SKIP_EXTERNAL_TESTS
          value: "1"
        - name: TEST_PROVIDER
          value: none
        - name: KUBECONFIG
          value: /kube/config   # 👈 This is where the kubeconfig will be mounted
        command: ["/usr/bin/openshift-tests"]
        args:
          - run
          - openshift/conformance/parallel
          - --provider=none
          - --junit-dir=/artifacts
        volumeMounts:
        #- name: artifacts
        #  mountPath: /artifacts
        - name: kubeconfig
          mountPath: /kube
          readOnly: true
        - name: junit-artifacts
          mountPath: /artifacts
      volumes:
      #- name: artifacts
      #  emptyDir: {}
      - name: junit-artifacts
        persistentVolumeClaim:
          claimName: junit-reports-pvc
      - name: kubeconfig
        secret:
          secretName: kubeconfig-secret  # 👈 Secret that contains kubeconfig
